#/usr/bin/python

import re 
import os 
import sys 

RE_TYPE_NAME = re.compile(r'([\s]*k[A-Za-z0-9]+),.*')

CPP_TEMPLATE = (
"""std::string type_names[] = {{
    {}
}};
"""
)

def main(*argv):
    """Parse the MFn header file to generate an array of MFn::Type names."""

    cmd, = (argv or [None])

    mfn_inl_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'src', 'MFn.Types.inl')

    if cmd == 'parse':
        _parse(mfn_inl_path)
    elif cmd == 'clear':
        _clear(mfn_inl_path)

    return 0


def _clear(mfn_inl_path):
    with open(mfn_inl_path, 'w') as fp:
        fp.write('// Auto-generated by /Scripts/mfn.py at build type\n')


def _parse(mfn_inl_path):
    mfn_header = os.path.join(os.environ['DEVKIT_LOCATION'], 'include', 'maya', 'MFn.h')

    with open(mfn_header, 'r') as fp:
        lines = fp.readlines()

    type_name_list = [
        'kInvalid'
    ]

    for line in lines:
        match = RE_TYPE_NAME.match(line)

        if not match:
            continue

        type_name = match.groups(0)[0].strip()
        type_name_list.append(type_name)

    cpp_file = CPP_TEMPLATE.format(
        ',\n\t'.join(
            ['"{}"'.format(each) for each in type_name_list]    
        )
    )

    with open(mfn_inl_path, 'w') as fp:
        fp.write(cpp_file)

if __name__ == '__main__':
    main(*sys.argv[1:])